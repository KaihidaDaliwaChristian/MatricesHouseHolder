library(devtools)
devtools::install()
library(householder)
least_sqr
library(devtools*)
devtools::document()
devtools::install()
hh_matrix
# Nous allons nommer cette fonction hh_matrix
hh_matrix <- function(x){
# Définissons la taille de la matrice
n <- length(x)
# Définisons un vecteur de base
e1 <- c(1,rep(0,n-1))
# normalisons notre vecteur v pour obtenir un vecteur de norme 1
alpha <- -sign(x[1])*sqrt(sum(x^2))
u <- x-alpha*e1
v <- u/sqrt(sum(u^2))# Qui est un vecteur normalisé
# maintenant calculons la matrice de Householder pour notre vecteur
H <- diag(n)-2*(v%*%t(v))
# affichons notre matrice de Householder
return(H)
}
e1 <- C(1,o,o)
e1 <- C(1,0,0)
e1 <- c(1,rep(0,2))
e1
v <- c(1,2,3)
v
hh_matrix(v)
source("~/householder/R/mat_householder.R")
source("~/householder/R/least_square.R")
source("~/householder/R/qr_householder.R")
devtools::install()
library(devtools)
devtools::install()
library(householder)
h <- least_square()
update.packages(householder)
update.packages("householder")
householder
householder()
?householder
is("package:householder")
source("~/householder/R/mat_householder.R")
source("~/householder/R/least_square.R")
source("~/householder/R/qr_householder.R")
library(devtools)
devtools::install()
library(householder)
A <- array(c(1,2,3,1,1,1),dim = c(3,2))
A
b <- c(2,3,5)
b
least_sqr(A,b)
library(devtools)
devtools::install()
library(householder)
